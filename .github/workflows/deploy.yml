name: CI/CD for Rotiapp

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Set up Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node }}

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev

    - name: Verify GDAL version
      run: |
        gdalinfo --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # - name: Run tests
    #   env:
    #     SECRET_KEY: ${{ secrets.SECRET_KEY }}
    #     POSTGRESQL_HOST: ${{ secrets.POSTGRESQL_HOST }}
    #     POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
    #     POSTGRESQL_USER: ${{ secrets.POSTGRESQL_USER }}
    #     POSTGRESQL_DATABASE: ${{ secrets.POSTGRESQL_DATABASE }}
    #     POSTGRESQL_PORT: ${{ secrets.POSTGRESQL_PORT }}
    #     DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
    #     EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
    #     EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
    #     EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
    #     EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
    #     EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
    #     EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
    #     MERCADOPAGO_ACCESS_TOKEN: ${{ secrets.MERCADOPAGO_ACCESS_TOKEN }}
    #     DEBUG: 'False'
    #     GITHUB_ACTIONS: 'true'
    #     GDAL_LIBRARY_PATH:  /usr/lib/libgdal.so


      # run: |
      #   python manage.py test

    - name: Debug SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.HOSTINGER_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "SSH Key Content:"
        cat ~/.ssh/id_rsa

    - name: Deploy to Hostinger
      if: success()
      env:
        SSH_PRIVATE_KEY: ${{ secrets.HOSTINGER_KEY }}
        HOST: ${{ secrets.HOSTINGER_SERVER_IP }}
        USER: ${{ secrets.HOSTINGER_SSH_USER }}
        APP_DIR: /opt/rotiapp
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DEBUG: 'False'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.HOSTINGER_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.HOSTINGER_SERVER_IP }} >> ~/.ssh/known_hosts

        # Intentar una conexión SSH simple para verificar la autenticación
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -t ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SERVER_IP }} "echo 'SSH connection successful'"

        # Continuar con el despliegue si la conexión SSH es exitosa
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -t ${{ secrets.HOSTINGER_SSH_USER }}@${{ secrets.HOSTINGER_SERVER_IP }} <<EOF
          cd $APP_DIR
          git config --global --add safe.directory $APP_DIR
          git pull origin master
          pyenv activate rotiapp
          pip install -r requirements.txt
          python manage.py migrate
          python manage.py collectstatic --noinput
          sudo supervisorctl restart rotiapp:
        EOF
